<resources>
    <string name="app_name">Lab4</string>

    <string name="singleton_description">Singleton (Одиночка) — это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.</string>
    <string name="singleton_application">Когда в программе должен быть единственный экземпляр какого-то класса, доступный всем клиентам (например, общий доступ к базе данных из разных частей программы).\nКогда вам хочется иметь больше контроля над глобальными переменными.</string>
    <string name="singleton_pros">Гарантирует наличие единственного экземпляра класса.\nПредоставляет к нему глобальную точку доступа.\nРеализует отложенную инициализацию объекта-одиночки.</string>
    <string name="singleton_cons">Нарушает принцип единственной ответственности класса.\nМаскирует плохой дизайн.\nПроблемы мультипоточности.</string>

    <string name="observer_description">Observer (Наблюдатель) — это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.</string>
    <string name="observer_application">Когда после изменения состояния одного объекта требуется что-то сделать в других, но вы не знаете наперёд, какие именно объекты должны отреагировать.</string>
    <string name="observer_pros">Издатели не зависят от конкретных классов подписчиков и наоборот.\nВы можете подписывать и отписывать получателей на лету.\nРеализует принцип открытости/закрытости.</string>
    <string name="observer_cons">Подписчики оповещаются в случайном порядке.</string>

    <string name="state_description">State (Состояние) — это поведенческий паттерн проектирования, который позволяет объектам менять поведение в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.</string>
    <string name="state_application">Когда у вас есть объект, поведение которого кардинально меняется в зависимости от внутреннего состояния, причём типов состояний много, и их код часто меняется.\nКогда код класса содержит множество больших, похожих друг на друга, условных операторов, которые выбирают поведения в зависимости от текущих значений полей класса.\nКогда вы сознательно используете табличную машину состояний, построенную на условных операторах, но вынуждены мириться с дублированием кода для похожих состояний и переходов.</string>
    <string name="state_pros">Избавляет от множества больших условных операторов машины состояний.\nКонцентрирует в одном месте код, связанный с определённым состоянием.\nУпрощает код контекста.</string>
    <string name="state_cons">Может неоправданно усложнить код, если состояний мало и они редко меняются.</string>

    <string name="factory_description">Factory (Фабрика) — это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.</string>
    <string name="factory_application">Когда заранее неизвестны типы и зависимости объектов, с которыми должен работать ваш код.\nКогда вы хотите экономить системные ресурсы, повторно используя уже созданные объекты, вместо порождения новых.</string>
    <string name="factory_pros">Избавляет класс от привязки к конкретным классам продуктов.\nВыделяет код производства продуктов в одно место, упрощая поддержку кода.\nУпрощает добавление новых продуктов в программу.\nРеализует принцип открытости/закрытости.</string>
    <string name="factory_cons">Может привести к созданию больших параллельных иерархий классов, так как для каждого класса продукта надо создать свой подкласс создателя.</string>

    <string name="composite_description">Composite (Компоновщик) — это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную структуру, а затем работать с ней так, как будто это единичный объект.</string>
    <string name="composite_application">Когда вам нужно представить древовидную структуру объектов.\nКогда клиенты должны единообразно трактовать простые и составные объекты.</string>
    <string name="composite_pros">Упрощает архитектуру клиента при работе со сложным деревом компонентов.\nОблегчает добавление новых видов компонентов.</string>
    <string name="composite_cons">Создаёт слишком общий дизайн классов.</string>
</resources>